package {{ .Pkg }}

{{ .CompImport }}
import "fmt"
import "reflect"
import "slices"
import "sync"

var sortLock sync.Mutex

func SelectSorted(cmp func(a Entity, b Entity) int, selector interface{}) {
    sortLock.Lock()
    defer sortLock.Unlock()

    i := 0
    switch selector.(type) {
    {{ range .Selects }}{{if not .EarlyStop}}
    case func(Entity, {{ range .Args }}*comp.{{ .Name }}, {{ end }}):
        Select(func(e Entity, {{ range $i, $arg := .Args }}arg{{ $i }} *comp.{{ $arg.Name }}, {{ end }}) {
            sortSpace[i] = e
            i++
        })
    {{ end }}{{ end }}
    default:
        panic(fmt.Sprintf("unknown selector function: run go generate: %s", reflect.TypeOf(selector).String()))
    }

    slices.SortFunc(sortSpace[:i], cmp)
    for j := 0; j < i; j++ {
        entity := sortSpace[j]
        switch fun := selector.(type) {
        {{ range .Selects }}{{if not .EarlyStop}}
        case func(Entity, {{ range .Args }}*comp.{{ .Name }}, {{ end }}):
            fun(entity, {{ range .Args }}&store{{ .Name }}[entity.id >> entityPageBits][entity.id % entityPageSize], {{ end }})
        {{ end }}{{ end }}
        }
    }
}

func Select(selector interface{}) {
    match := true
    _ = match
    cont := true
    _ = cont
    var entity Entity
    for i := 0; i < currEntities; i++ {
        match = true
        entity = entities[i >> entityPageBits][i % entityPageSize]
        switch fun := selector.(type) {
        {{ range .Selects }}
        case func(Entity, {{ range .Args }}*comp.{{ .Name }}, {{ end }}) {{ if .EarlyStop }}bool{{ end }}:
            {{ range .Args }}match = match && entity.components[{{ compmapindex .CompIndex }}] & {{ compsubindex .CompIndex }} != 0
            {{ end }}
            if match {
                {{ if .EarlyStop }}cont = {{ end }}fun(entity, {{ range .Args }}&store{{ .Name }}[entity.id >> entityPageBits][entity.id % entityPageSize], {{ end }})
                {{ if .EarlyStop }}if !cont { return }{{ end }}
            }
        {{ end }}
        case func(Entity):
            fun(entity)
        default:
            panic(fmt.Sprintf("unknown selector function: run go generate: %s", reflect.TypeOf(selector).String()))
        }
    }
}