// Code generated by github.com/zdandoh/ecs DO NOT EDIT.

package {{ .Pkg }}

{{ .CompImport }}
import "{{ .FullPkg }}/entity"

var currEntities = 0
var entityCap = 0

var systems []system

func init() {
    newEntityPage()
}

var sortSpace []Entity

func newEntityPage() {
    newPage := make([]Entity, entityPageSize)
    entities = append(entities, newPage)

    pageHeaders = append(pageHeaders, pageHeader{})
    sortSpace = make([]Entity, entityCap + entityPageSize)

    {{ range .Comps }}
    new{{ .Name }}Page := make([]{{ cpkg . }}{{ .Name }}, entityPageSize)
    store{{ .Name }} = append(store{{ .Name }}, new{{ .Name }}Page)
    {{ end }}
    entityCap += entityPageSize
}

// Reset deletes all entities, components, and state of the current ECS.
func Reset() {
    ClearSystems()
    entities = nil
    freeList = nil
    pageHeaders = nil
    {{ range .Comps }}
    store{{ .Name }} = nil
    {{ end }}
    currEntities = 0
    entityCap = 0

    newEntityPage()
}

// NewEntity creates a new entity and returns a handle to it.
func NewEntity() Entity {
    var retID EntityID
    if len(freeList) == 0 {
        if currEntities >= entityCap {
            newEntityPage()
        }

        retID = EntityID(currEntities)
        currEntities++
    } else {
        retID = freeList[len(freeList)-1]
        freeList = freeList[:len(freeList)-1]
    }

	entities[retID >> entityPageBits][retID % entityPageSize] = Entity{
	    ident: uint64(retID << 32) | (entities[retID >> entityPageBits][retID % entityPageSize].generation() + 1)}

	return entities[retID >> entityPageBits][retID % entityPageSize]
}

// Lookup converts an entity reference into an Entity that can be used for component lookups and ECS operations.
func Lookup(r entity.Ref) Entity {
    return Entity{ident: uint64(r)}
}

// Is returns true if an entity handle represents the same entity as the provided entity.
func (e Entity) Is(other Entity) bool {
    return e.ident == other.ident
}

func (e Entity) Zero() bool {
    return e.ident == 0
}

// Ref obtains a reference for the given entity
func (e Entity) Ref() entity.Ref {
    return entity.Ref(e.ident)
}

// EntityCount returns the maximum number of entities that have been created within the ECS.
func EntityCount() int {
    return currEntities
}