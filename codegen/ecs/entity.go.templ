package {{ .Pkg }}

const entityPageBits = 10
const entityPageSize = 1 << entityPageBits

type EntityID uint64

type ComponentMapping [{{ .CompContainerCount }}]uint64

type Entity struct {
	id         EntityID
	generation uint64
	components ComponentMapping
}

var freeList []EntityID
var entities [][]Entity

func (e Entity) Kill() {
    if !e.Alive() {
        return
    }
	freeList = append(freeList, e.id)
	entities[e.id >> entityPageBits][e.id % entityPageSize].generation++
	entities[e.id >> entityPageBits][e.id % entityPageSize].components = ComponentMapping{}
}

func (e Entity) Alive() bool {
    return e.generation == entities[e.id >> entityPageBits][e.id % entityPageSize].generation
}

{{ range $i, $c := .Comps }}
func (e Entity) {{ $c.Name }}() *{{ $c.Name }} {
    if !e.Alive() {
        return nil
    }
    if entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] & {{ compsubindex $i }} != 0 {
        return &store{{ $c.Name }}[e.id >> entityPageBits][e.id % entityPageSize]
    }
    return nil
}
{{ end }}
