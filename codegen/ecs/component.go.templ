package {{ .Pkg }}

{{ .CompImport }}

type ComponentID [{{ .CompContainerCount }}]uint64

{{ range .Comps }}
var store{{ .Name }} [][]comp.{{ .Name }}{{ end }}

{{ range $i, $comp := .Comps }}
var {{ $comp.Name }}ID = ComponentID{}
{{ end }}

func init() {
    {{ range $i, $comp := .Comps }}
    {{ $comp.Name }}ID[{{ compmapindex $i }}] = {{ compsubindex $i }}{{ end }}
}

{{ range $i, $c := .Comps }}
func (e Entity) Set{{ .Name }}(c comp.{{ .Name }}) {
    if !e.Alive() {
        return
    }

    if entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] & {{ compsubindex $i }} == 0 {
        pageHeaders[e.id >> entityPageBits][{{ $i }}]++
    }
    entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] |= {{ compsubindex $i }}
    store{{ .Name }}[e.id >> entityPageBits][e.id % entityPageSize] = c
}
{{ end }}

{{ range $i, $c := .Comps }}
func (e Entity) Remove{{ .Name }}() {
    if !e.Alive() {
        return
    }

    if entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] & {{ compsubindex $i }} != 0 {
        pageHeaders[e.id >> entityPageBits][{{ $i }}]--
    }
    entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] &= ^uint64({{ compsubindex $i }})
}
{{ end }}

{{ range $i, $c := .Comps }}
func (e Entity) Has{{ .Name }}() bool {
    if !e.Alive() {
        return false
    }
    return entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] & {{ compsubindex $i }} != 0
}
{{ end }}
