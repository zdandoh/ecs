package {{ .Pkg }}

type ComponentID uint64

{{ range .Comps }}
var store{{ .Name }} [][]{{ .Name }}{{ end }}

{{ range $i, $comp := .Comps }}
const {{ $comp.Name }}ID ComponentID = {{ lshift $i }}
{{ end }}

{{ range $i, $c := .Comps }}
func (e Entity) Add{{ .Name }}(c {{ .Name }}) {
    if !e.Alive() {
        return
    }

    entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] |= {{ compsubindex $i }}
    store{{ .Name }}[e.id >> entityPageBits][e.id % entityPageSize] = c
}
{{ end }}

{{ range $i, $c := .Comps }}
func (e Entity) Remove{{ .Name }}() {
    if !e.Alive() {
        return
    }

    var zero {{ .Name }}
    entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] &= ^uint64({{ compsubindex $i }})
    store{{ .Name }}[e.id >> entityPageBits][e.id % entityPageSize] = zero
}
{{ end }}

{{ range $i, $c := .Comps }}
func (e Entity) Has{{ .Name }}() bool {
    if !e.Alive() {
        return false
    }
    return entities[e.id >> entityPageBits][e.id % entityPageSize].components[{{ compmapindex $i }}] & {{ compsubindex $i }} != 0
}
{{ end }}
